`timescale 1ns / 1ps

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // 멀티플렉서 2개 받고 1개 출력 2x1
   
   module mux_2_1(
            input [1:0] d,
            input s,
            output f);
            
            assign f =s ? d[1] :d[0];
            
   endmodule  
   
   
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // 멀티플렉서4x1
   
   module mux_4_1(
            input [3:0] d,
            input [1:0] s, //s의 값에 따라 출력되는 d의 비트가 달라짐
            output f);
            
            assign f = d[s];
            
   endmodule  
   
         ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // 멀티플렉서8x1
   
   module mux_8_1(
            input [7:0] d,
            input [2:0] s, //s의 값에 따라 출력되는 d의 비트가 달라짐
            output f);
            
            assign f = d[s];
            
   endmodule  
   
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // 디멀티플렉서1x4
   
   module demux_1_4(
            input d,
            input [1:0] s,
            output [3:0] f);
            
            assign f = (s==2'b00) ? {3'd000, d} : 
                             ((s==2'b01) ? {2'b00, d, 1'b0} :
                             ((s==2'b10) ? {1'b0, d, 2'b00} :{d,3'b000}));
                                                
   endmodule
   
   
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // 멀티플렉서 +디멀티플렉서 (멀티플렉서)
   
   module mux_demux_test(
                input [3:0] d,
                input [1:0] mux_s, demux_s,
                output [3:0] f);
              
              wire line;
              
              mux_4_1 mux(.d(d), .s(mux_s), .f(line));
              demux_1_4 demux(.d(line), .s(demux_s), .f(f));
  
  endmodule
